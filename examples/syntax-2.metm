// синтаксис языка metam

//> многострочный
    комментарий <//

//>
    сборка модульная, без отдельного сборочного файла (просто кидайте в компилятор файлы)
    паттерн visitor применяется
    модуль может быть глобальным на файл, или внотри одного файла может быть несколько модулей, или вообще не быть.
    поддерживаются подмодули
    нельзя объявить 2+ глобальных модуля в одном файле
<//

module syntax
// module a {...}   // неглобальный на файл модуль
// module a.b  или  module a {module b}  или  module a.b {...}  // подмодули
// namespace a {}   // из-за строки `module syntax` значит syntax.a

//> Включение модулей:

    можно использовать модули, если они включены
    включается сразу целый модуль, или его подмодуль
    модульность не влияет на пространства имён
    включать можно только модули
    любой модуль автоматически импортирует свои зависимости
<//

import stlib    // стандартная библиотека
// import a.b   // включение подмодуля

//> Пространства имён:

    пространства имён призваны убрать проблемму повторяющихся имён
    внутри каждой функции работает собственное пространство имён
    чтобы обратиться к объекту из другого пространства имён надо назвать имя ПИ
    чтобы обратиться к пространству имён выше текущего, используйте nsup
    поддерживаются подпространства имён
    нельзя объявить 2+ глобальных пространства имён в одном файле
    если "использовать пространство имён", то не потребуется обращаться к нему по имени
<//

namespace syntax    // объявление глобального пространства имён
// namespace a {...}
// namespace a.b  или  namespace a {namespace b}  или  namespace a.b {...}
// namespace a {}   // из-за строки `namespace syntax` значит syntax.a
// using namespace a

//> Переменные:

    var имя: тип = значение     - переменные
    const имя: тип = значение   - константы, неизменяемые переменные
    opt<x>  - необязательный_x, да, opt - шаблонный тип
    поддерживаются указатели, нет арифметики указателей
<//

namespace ns_var {
    const a = 0   // a: int
    const b = 0.  // b: double
    const c = 0.f // c: float
    const d = 0b  // d: byte
    // суффиксы - f:float, d:double, i:int, u(x):беззнаковый_x, b:byte, sh:short, i64:int64
    // var e   // запрещено, ни типа, ни значения
    var e: string   // e = ""
    var f: opt<string>  // f = nullopt
    var g: int&    // g - указатель, g = nullptr
    const h &= a   // h - константный указатель (ссылка), &= оператор присвоения адреса
    var arr: int[5] // массив на 5 элементов
    var arr: int[...] // вектор (данмический массив) = []
}

//> Функции

    имя<шаблон>(аргументы): тип -> тело
<//

sqr(x) -> x*x
pow(x, c: uint) -> {
    var r = 1
    for c times
        r *= c
    return r
}

//> Типизация

    type имя<шаболон> {тело}
    type имя = имя      // typedef
    x[i]    - массив x на i элементов
    x[...]  - вектор x (динамический массив)
    x[]     - тоже вектор x
    поддерживаются методы
    поддерживается множественное/одиночное наследование
    поддерживаются концепты
    есть слабая приватизация
    downcast<X>(x)  - выдаёт указатель, nullptr если не получилось
    upcast<X>(x)    - выдаёт указатель
<//

namespace ns_type {
    type optional = opt
    type xy<T> {
        var x, y: T // несколько переменных одного типа
        operator T() -> stl.sqrt(x*x + y*y) // оператор преобразования
    }
    type array<T, C: uint64> = T[C]
    type caffe {
        static var caffe_count = 0ui
        var cc: opt<int>

        caffe() = default
        caffe(cc: int) : cc(cc) -> _

        static caffe() -> {
            for m in caffe.methods
                if typeTraits.isConstructor(m)
                    m.ast.add(<: ++caffe_count :>)
                else if typeTraits.isDestructor(m)
                    m.ast.add(<: --caffe_count :>)
        }
    }
    type xyz<T> : xy<T> {
        var z: T
    }
    type a {var a = 0}
    type b {var b = 0}
    type c : a, b {}    // c.a и c.b существуют

    concept number T = T == int || T == uint    // ||...
    concept even i: number = i % 2 == 0     // концепты можно использовать как тип
    concept iterator<t> T = required {      // required - специальный блок проверок
        a -> t&         // преобразуется в t  (функции тут объявить нельзя)
        ++a -> iterator // рекурсия; решается: при повторной проверке игнорируется (даёт true)
        --a -> iterator
    }

    type private_public {
        var a = 0   // public
        private:
        var b = 0   // private
        var c = 0   // private
        public var d = 0    // public
        var e = 0   // private
        public:
        // public...
    }
}

