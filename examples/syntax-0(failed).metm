// syntax.metm

//> Многострочный
    комментарий <//

// Включение ФАЙЛОВ, не модулей.
import "stl.metm"

a, b, c   // перечисление имён (игнорируется без контекста)

// Динамическая типизация. a - переменная, хранит строку "b"
a = "b"

a, #a, c    // Эквивалентно a, b, c;  a = "b"; #a всегда рассматривается как значение a

1 = 22      // Так тоже можно, число без контекста - имя переменной.
b = #1      // b = 22; после # число тоже имя переменной
//"O_*" = 3     // строка не может быть именем переменной
var "a" = 7     // a = 7; var - функция, делает из значения имя переменной

c = [10, 5, 1]  // c - массив (динамический); [] создают контекст массива
c.add(-2)       // c = [10, 5, 1, -2]
с[2]            // = 1

d = <: a + b :>     // d теперь хранит часть синтаксического дерева (+ (a b)); <::> - контекст ast
d.0 = <: c :>       // d = <: c + b :>; корень d - +, d.0, d.1 - его поддеревья; после . число тоже имя переменной
d.#(c[2]) = <: a :>  // d = <: c + a :>; скобки сбрасывают контекст

sqr = x -> x*x      // sqr - функция, сычисляет квадрат числа
sqr 2               // вызов функции

pow = x, c -> {
    r = x
    repeat c-1
        r *= x
    r
}
// последнее выполненное выражение в {}, или return * - возвращаемое значение
pow = x, c ->:
    r = x
    repeat c-1:
        r *= x
    r
// : в конце строки создаёт питоноподобный блок кода (на табах)

pow 2, 5        // вызов функции со множеством параметров, 2, 5 тут перечисление значений, есть контекст вызова функции
//pow(2, 5)     // нельзя, так мы вызовем pow от перечисления ИМЁН 2, 5 (считайте что перечисление имён - безымянный тип)
pow (enum [2, 5])     // массив в перечисление зничений; аккуратнее, не передавайте в функцию функцию :)

1, 2 = 1, 2     // 1 = 1; 2 = 2; перечисление имён := перечисление значений
a, b = b, a     // меняем значения a и b местами;

foo = f, x -> f x   // функция, которая вызывает функцию
foo (x -> x*x), 10  // лямбда-функция

(x -> x*x)(10 * 10)  // создание и моментальный вызов лямбды (вторые скобки не обязательны, они для красоты)

// _ - символ игнорирования
if true _
a = b > 11? 1 : 0
a = (if true {
    b+1
})
if (random 0, 10) > 5   // random генерирует случайное число
    console << ">5"     // console<< - вывод в консоль
else
    console << "<5"

repeat 10   // повторить 10 раз
    a += 2
while a < 100
    a += a
for v : [0, 1, 2, 3, 4, 5, 6]
    a *= a
for v : (range 0, 6)
    _
repeat 10 : i   // эквивалентно for i : (range 0, 9)
    _

match a:    // : в конце строки, смотрим табуляции
    <100 => console << a
    =100 => console << "a = 100"
    >100 => _
match {
    a<100 => _
    _   //...
}

(a -> a = 100)(a)
// a = предыдущее a, функция создаёт

// TODO: правила пространств имён, типов, операторов, stl
